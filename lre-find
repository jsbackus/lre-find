#!/usr/bin/env lua

-- Copyright (C) 2015 Jeff Backus(jeff@jsbackus.com)
--
-- Permission is hereby granted, free of charge, to any person
-- obtaining a copy of this software and associated documentation
-- files (the "Software"), to deal in the Software without
-- restriction, including without limitation the rights to use, copy,
-- modify, merge, publish, distribute, sublicense, and/or sell copies
-- of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-- NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
-- BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
-- ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-- CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

local version = "0";
local copyright = " v" .. version .. " Copyright (C) 2015 Jeff Backus";

local lfs = require "lfs";

-- Figure out how we were invoked
local run_as = string.match(arg[0], "([^/]+)$");

-- Create a table to handle different options for how we are started
-- Override __index to create a default case.
local run_modes = {}
run_modes.recp = {command="copy"};
run_modes.remv = {command="move"};
run_modes.reln = {command="link"};
run_modes.rerm = {command="remove"};
run_modes.reexec = {command="exec"};
run_modes_mt = {}
run_modes_mt.__index = function(table,key)
   return {command="default"}
end
setmetatable(run_modes, run_modes_mt)

-- Forward declarations of global-ish variables
local settings = {}
local options = {}
local showMsgs = {}
local paths = {}
local transform

-- Define helper functions

-- Attempts to match the specified pathname against settings.src. If it matches,
-- returns a table of matched elements, or nil otherwise.
local function match_pathname(path)
   -- Attempt to match specified path to specified src string and put
   -- result into a table.
   local elms = { string.match( path, settings.src ) }

   -- No match, so just return.
   if #elms == 0 then
      return
   end

   -- Build a table that can be passed to string.gsub() as a map of %N->matched
   -- value. Place original string into position 0.
   local map = {}

   local t
   if settings.lua then
      t = function( i ) return i end
   else
      t = function( i ) return tostring(i) end
   end
   
   for i = 1, #elms do
      if settings.lua then
	 map[ t(i) ] = elms[ i ]
      else
      end
   end
   map[ t(0) ] = path

   return map
end

-- Default SRC -> DEST transform
-- Receives a table, v, of elements form the pattern match and substitutes
-- those values into settings.dest.
local function default_transform(v)
   return string.gsub( settings.dest, "%%(%d)", v )
end
-- Set default transform
transform = default_transform

local function link_item(src, dest)
   if( settings.symbolic and settings.absolute ) then
      src = lfs.currentdir().."/"..src
   end
   if( settings.verbose ) then
      local cmd = "ln"
      if( settings.symbolic ) then
	 cmd = cmd.." -s"
      end
      print(cmd.." '"..src.."' '"..dest.."'")
   end
   if( settings.dry_run ) then
      return
   end

   ok, msg, code = lfs.link( src, dest, settings.symbolic )
   if( ok == nil ) then
      print("Error creating link from '"..src.."' to '"..dest.."': "..msg)
   end
end

local function move_item(src, dest)
   if( settings.verbose ) then
      print("mv '"..src.."' '"..dest.."'")
   end
   if( settings.dry_run ) then
      return
   end
   os.rename( src, dest )
end

local function copy_file(src, dest)

   if( settings.verbose ) then
      print("cp '"..src.."' '"..dest.."'")
   end
   if( settings.dry_run ) then
      return
   end
   
   local BUFSIZE = 2^20 -- 1MB at a time
   local fin = assert(io.open(src, "rb"))
   local fout = assert(io.open(dest, "wb"))
   while true do
      local bytes = fin:read(BUFSIZE)
      if not bytes then break end
      fout:write(bytes)
   end
   fin:close()
   fout:close()
end

local function remove_item(src, dest)
   if( settings.verbose ) then
      print("rm '"..src.."'")
   end
   if( settings.dry_run ) then
      return
   end

   if( settings.interactive ) then
      print("Interactive mode not implemented!")
      return
   end
   os.remove( src )
end

local function exec_item(src, dest)
   local out
   if( settings.verbose ) then
      out = io.output();
      out:write("'"..dest.."'");
      out:close();
   end
   if( settings.dry_run ) then
      print("");
      return;
   end

   bOk, result, code = os.execute( dest );
   if( bOk == nil ) then
      print("Error: unable to execute '"..dest.."'!")
      return;
   end
   if( settings.verbose ) then
      print(" => "..result.." ("..code..")");
   end
end

-- Create a table to mode-specific settings.
-- Override __index to create a default mode.
local single_command = function ( parser ) return parser; end;
local fn_modes = {}
fn_modes.copy = {
   desc = "Copy with Lua pattern matching",
   parsers = { copy = single_command },
   file_action=copy_file,
};
fn_modes.move = {
   desc = "Move with Lua pattern matching",
   parsers = { move = single_command },
   file_action=move_item,
};
fn_modes.link = {
   desc = "Create links with Lua pattern matching",
   parsers = { link = single_command },
   file_action=link_item,
};
fn_modes.remove = {
   desc = "Remove files and directories with Lua pattern matching",
   parsers = { remove = single_command },
   file_action=link_item,
};
fn_modes.exec = {
   desc = "Find and Execute with Lua pattern matching",
   parsers = { exec = single_command },
   file_action=exec_item,
};
-- Default case. Create a new parser for each mode.
fn_modes_mt = {}
fn_modes_mt.__index = function(table,key)
   local ret_val_mt = {}
   ret_val_mt.__index = function(table, key)
      return function ( parser )
	 return parser:command(key, fn_modes[key]["description"])
      end
   end
   local ret_val = {}
   setmetatable(ret_val, ret_val_mt)

   return {
      desc = "Tool to move/copy/link files with Lua pattern matching",
      parsers = ret_val,
   }
end
setmetatable(fn_modes, fn_modes_mt)

-- local cur_mode = fn_modes[run_modes[run_as]["command"]]

local function handle_dir(dir_names)
   local idx = 1;
   while( idx <= #dir_names ) do
      local dir_name = dir_names[idx];
      for dir_obj in lfs.dir(dir_name) do
	 pathname = dir_obj
	 if( dir_name ~= '.' ) then
	    pathname = dir_name.."/"..pathname;
	 end

         attrs = lfs.attributes(pathname);

	 -- Attempt to match against SRC
	 elements = match_pathname( pathname )
	 if elements then
	    newname = transform( elements )
	 else
	    newname = nil
	 end

	 if( attrs.mode == "directory" and
	     dir_obj ~= '.' and dir_obj ~= '..' ) then
	    
	    -- Append to end of list if recursive mode enabled.
	    if( settings.recursive ) then
	       dir_names[ #dir_names + 1 ] = pathname
	    end
	    if( settings.files_only == nil ) then
	       -- todo
	       print("Handling directory '"..pathname.."'")
	    end
	 elseif( attrs.mode == "file" ) then
	    if( settings.dirs_only == nil and newname ~= nil ) then
	       cur_mode.file_action( pathname, newname )
	    end
	 end
      end
      idx = idx + 1
   end
end

local function do_help()
   print "To do!"
end

-- Define table of command-line arguments. Format:
-- "argument" = {
--   desc = "description",
--   params = { param1 = "desc", ... paramN = "desc" }
--   action = function( index ) return next_index end
-- }
-- 
-- Each action function should take 1 argument, the index into the arg 
-- variable, and return the number of arguments consumed
options = {}

options["--help"] = {
   action = function( opt_args )
      do_help()
      os.exit(0)
   end
}

options["--version"] = {
   action = function( opt_args )
      print(run_as..copyright)
      os.exit(0)
   end
}

-- options["-D"] = { desc = "Displays debug information",
-- 		  params = { debugoptions = "Comma-delimited list of debug " ..
-- 				"options to turn on" },
-- 		  action = function( index )
-- 		     for i in arg[ index + 1 ]:gmatch("([^,]+)") do
-- 			print("Setting "..i)
-- 			showMsgs[ i ] = true
-- 		     end
-- 		     return 1
-- 		  end }

options["-v"] = {
   action = function( opt_args )
      settings.verbose = true
   end
}

options["--dry-run"] = {
   action = function( opt_args )
      settings.dry_run = true
      settings.verbose = true
   end
}

-- Interactive mode
options["-i"] = {
   action = function( opt_args )
      settings.interactive = true
   end
}

-- Search and operate recursively
options["-r"] = { 
   action = function( opt_args )
      settings.recursive = true
      settings.operate_deep = true
   end
}

-- Don't search recursively, but do operate recursively (i.e. deep copy)
options["-R"] = {
   action = function( opt_args )
      settings.recursive = nil
      settings.operate_deep = true
   end
}

-- Only match directories
options["-d"] = {
   action = function( opt_args )
      settings.dirs_only = true
   end
}

-- Only match files
options["-f"] = {
   action = function( opt_args )
      settings.files_only = true
   end
}

-- Copy
options["-c"] = {
   max_arguments = 1,
   action = function( opt_args )
      cur_mode = fn_modes.copy
      if( 0 < #opt_args ) then
	 settings.dest = opt_args[ 1 ]
      else
	 settings.dest = "%0"
      end
   end
}

-- Move
options["-m"] = {
   max_arguments = 1,
   action = function( opt_args )
      cur_mode = fn_modes.move
      if( 0 < #opt_args ) then
	 settings.dest = opt_args[ 1 ]
      else
	 settings.dest = "%0"
      end
   end
}

-- Hard link
options["-l"] = {
   max_arguments = 1,
   action = function( opt_args )
      cur_mode = fn_modes.link
      settings.symbolic = false
      if( 0 < #opt_args ) then
	 settings.dest = opt_args[ 1 ]
      else
	 settings.dest = "%0"
      end
   end
}

-- Symbolic link
options["-s"] = {
   max_arguments = 1,
   action = function( opt_args )
      cur_mode = fn_modes.link
      settings.symbolic = true
      if( 0 < #opt_args ) then
	 settings.dest = opt_args[ 1 ]
      else
	 settings.dest = "%0"
      end
   end
}

-- Use absolute path of each match
options["-a"] = {
   action = function( opt_args )
      settings.absolute = true
   end
}

-- Remove
options["--delete"] = {
   max_arguments = 1,
   action = function( opt_args )
      cur_mode = fn_modes.remove
      if( 0 < #opt_args ) then
	 settings.dest = opt_args[ 1 ]
      else
	 settings.dest = "%0"
      end
   end
}

-- Execute once per match
options["-e"] = {
   min_arguments = 1,
   max_arguments = 1,
   action = function( opt_args )
      cur_mode = fn_modes.exec
      settings.dest = opt_args[ 1 ]
   end
}

-- Execute with all matches at once
options["-E"] = {
   min_arguments = 1,
   max_arguments = 2,
   action = function( opt_args )
      cur_mode = fn_modes.exec
      settings.command = opt_args[ 1 ]
      if( 1 < #opt_args ) then
	 settings.dest = opt_args[ 2 ]
      else
	 settings.dest = "%0"
      end
   end
}

options["-p"] = {
   max_arguments = 1,
   action = function( opt_args )
      cur_mode = fn_modes.print
      if( 0 < #opt_args ) then
	 settings.dest = opt_args[ 1 ]
      else
	 settings.dest = "%0"
      end
   end
}

-- Specify starting search path(s)
options["-P"] = {
   min_arguments = 1,
   max_arguments = 99,
   action = function( opt_args )
      for _, p in ipairs( opt_args ) do
	 paths[ #paths + 1 ] = p
      end
   end
}

-- TODO: Options to:
-- * change to parent directory before executing
-- * combine all matches into a single command

-- local parser = argparse()
--    :name(run_as)
--    :description(cur_mode["desc"])
--    :add_help "-h"
--    :epilog(run_as..copyright)

-- -- Global parser Options
-- parser:flag("-r")
--    :description("Recursively process directories")

-- parser:flag("-d")
--    :description("Only manipulate directories")

-- parser:flag("-f")
--    :description("Only manipulate files (still crawls directories if -r used)")

-- parser:flag("--dry-run")
--    :description("Dry run (don't actually do anything). Implies -v.")

-- parser:flag("-v")
--    :description("Displays actions as they happen.")

-- parser:flag("-l")
--    :description("Interpret DEST as Lua code.")

-- -- Define sub-command options
-- local sub_parser;
   
-- -- Define copy-specific options
-- sub_parser = cur_mode.parsers["copy"];
-- if sub_parser then
--    sub_parser = sub_parser( parser )

--    sub_parser:argument("SRC")
--       :description("Expression used to match source files")
--       :settings(1)

--    sub_parser:argument("DEST")
--       :description("Expression used generate destination file names")
--       :settings(1)
-- end

-- -- Define move-specific options
-- sub_parser = cur_mode.parsers["move"];
-- if sub_parser then
--    sub_parser = sub_parser( parser )

--    sub_parser:argument("SRC")
--       :description("Expression used to match source files")
--       :settings(1)

--    sub_parser:argument("DEST")
--       :description("Expression used generate destination file names")
--       :settings(1)
-- end

-- -- Define link-specific options
-- sub_parser = cur_mode.parsers["link"];
-- if sub_parser then
--    sub_parser = sub_parser( parser )

--    sub_parser:argument("SRC")
--       :description("Expression used to match source files")
--       :settings(1)

--    sub_parser:argument("DEST")
--       :description("Expression used generate destination file names")
--       :settings(1)

--    sub_parser:flag("-s")
--       :description("Create symbolic link (defaults to hard link)")

--    sub_parser:flag("-a")
--       :description("Use absolute path when making symbolic link.")
-- end

-- -- Define move-specific options
-- sub_parser = cur_mode.parsers["remove"];
-- if sub_parser then
--    sub_parser = sub_parser( parser )

--    sub_parser:argument("SRC")
--       :description("Expression used to match source files")
--       :settings(1)

--    sub_parser:flag("-i")
--       :description("Prompt before removing.")
-- end

-- -- Define exec-specific options
-- sub_parser = cur_mode.parsers["exec"];
-- if sub_parser then
--    sub_parser = sub_parser( parser )

--    sub_parser:argument("SRC")
--       :description("Expression used to match source files")
--       :settings(1)

--    sub_parser:argument("DEST")
--       :description("Expression used generate destination file names")
--       :settings(1)
-- end

-- -- parser:argument("DIR")
-- --    :description("Optional starting directory to look for source files.")
-- --    :settings("?")
-- --    :default "."

-- settings = parser:parse(arg);

-- -- If -l is specified, reinterpret DEST as Lua code. Prepend defining a local
-- -- varsettings that contains the results of the match.
-- if settings.lua then
--    transform = loadstring("local v={...}; v=v[1]; "..settings.DEST)
-- end

-- -- If --dry-run is specified, force -v
-- if settings.dry_run then
--    settings.verbose = true
-- end

-- Handle Arguments
-- TODO: Need to be able to combine short args
local i = 1
while i <= #arg do
   print("Checking "..tostring(i)..": '"..arg[i].."'")
   if( arg[ i ]:sub( 1, 1 ) == '-' ) then
      local arglist = {}

      -- See if we're working with a long option or one or more short ones.
      -- Put option(s) onto arglist to process
      if( arg[ i ]:sub( 1, 2 ) == '--') then
	 -- Long option, stick remainder of string on arglist
	 arglist = { arg[ i ] }
      else
	 for o in arg[ i ]:sub( 2 ):gmatch( "." ) do
	    arglist[ #arglist + 1 ] = '-'..o
	 end
      end

      -- move index to next item in argument list
      i = i + 1

      -- Now process each of the options we found earlier.
      for _, elm in ipairs( arglist ) do
	 local opt = options[ elm ]
	 if opt then
	    -- Capture any option arguments
	    local opt_args = {}
	    local max = opt.max_arguments or 0
	    local done = ( max <= #opt_args ) or ( #arg < i )
	    while not done  do
	       -- See if next argument is an option.
	       if( arg[ i ]:sub( 1, 1 ) == '-' ) then
		  -- If so, we're done looking for option arguments.
		  done = true
	       else
		  -- If not, tack onto list and see if we've found all option
		  -- arguments.
		  opt_args[ #opt_args + 1 ] = arg[ i ]
		  i = i + 1
		  done = ( max <= #opt_args ) or ( #arg < i )
	       end
	    end

	    -- Make sure we've met the minimum number of option arguments
	    local min = opt.min_arguments or 0
	    if ( #opt_args < min ) then
	       print("Not enough arguments for '"..elm.."'!")
	       do_help()
	       os.exit(1)
	    end

	    -- Handle option
	    options[ elm ].action( opt_args )
	 else
	    print("Error: Unknown option '"..elm.."'!")
	    do_help()
	    os.exit(1)
	 end
      end
   else
      settings.src = arg[ i ]
      i = i + 1
   end
end

-- If no paths specified, assume we start in current one.
if #paths <= 0 then
   paths = {'.'}
end

-- debug
print("[Begin Debug]")
for k,v in pairs(arg) do print("\t"..k..": '"..tostring(v).."'") end
print("----")
for k,v in pairs(settings) do print("\t"..k..": '"..tostring(v).."'") end
print("Searching:")
for k,v in pairs(paths) do print("\t"..k..": '"..tostring(v).."'") end
print("[End Debug]")

-- Crawl specified directories
handle_dir(paths)
